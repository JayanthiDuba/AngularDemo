{"ast":null,"code":"import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';\nimport { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';\nimport { InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport const BASE_URL = new InjectionToken('BASE_URL');\nexport class EmployeeAPIClient {\n  constructor(http, baseUrl) {\n    this.jsonParseReviver = undefined;\n    this.http = http;\n    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"\";\n  }\n  /**\r\n   * @param body (optional)\r\n   * @return Success\r\n   */\n  addEmployee(body) {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/AddEmployee\";\n    url_ = url_.replace(/[?&]$/, \"\");\n    const content_ = JSON.stringify(body);\n    let options_ = {\n      body: content_,\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n    return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap(response_ => {\n      return this.processAddEmployee(response_);\n    })).pipe(_observableCatch(response_ => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processAddEmployee(response_);\n        } catch (e) {\n          return _observableThrow(e);\n        }\n      } else return _observableThrow(response_);\n    }));\n  }\n  processAddEmployee(response) {\n    const status = response.status;\n    const responseBlob = response instanceof HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;\n    let _headers = {};\n    if (response.headers) {\n      for (let key of response.headers.keys()) {\n        _headers[key] = response.headers.get(key);\n      }\n    }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return _observableOf(null);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null);\n  }\n  /**\r\n   * @param id (optional)\r\n   * @return Success\r\n   */\n  deleteEmployee(id) {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/DeleteEmployee?\";\n    if (id === null) throw new Error(\"The parameter 'id' cannot be null.\");else if (id !== undefined) url_ += \"id=\" + encodeURIComponent(\"\" + id) + \"&\";\n    url_ = url_.replace(/[?&]$/, \"\");\n    let options_ = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({})\n    };\n    return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap(response_ => {\n      return this.processDeleteEmployee(response_);\n    })).pipe(_observableCatch(response_ => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processDeleteEmployee(response_);\n        } catch (e) {\n          return _observableThrow(e);\n        }\n      } else return _observableThrow(response_);\n    }));\n  }\n  processDeleteEmployee(response) {\n    const status = response.status;\n    const responseBlob = response instanceof HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;\n    let _headers = {};\n    if (response.headers) {\n      for (let key of response.headers.keys()) {\n        _headers[key] = response.headers.get(key);\n      }\n    }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return _observableOf(null);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null);\n  }\n  /**\r\n   * @return Success\r\n   */\n  getAllEmployees() {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/GetAllEmployees\";\n    url_ = url_.replace(/[?&]$/, \"\");\n    let options_ = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Accept\": \"text/plain\"\n      })\n    };\n    return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap(response_ => {\n      return this.processGetAllEmployees(response_);\n    })).pipe(_observableCatch(response_ => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processGetAllEmployees(response_);\n        } catch (e) {\n          return _observableThrow(e);\n        }\n      } else return _observableThrow(response_);\n    }));\n  }\n  processGetAllEmployees(response) {\n    const status = response.status;\n    const responseBlob = response instanceof HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;\n    let _headers = {};\n    if (response.headers) {\n      for (let key of response.headers.keys()) {\n        _headers[key] = response.headers.get(key);\n      }\n    }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        let result200 = null;\n        let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        if (Array.isArray(resultData200)) {\n          result200 = [];\n          for (let item of resultData200) result200.push(EmployeeDto.fromJS(item));\n        } else {\n          result200 = null;\n        }\n        return _observableOf(result200);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null);\n  }\n  /**\r\n   * @param body (optional)\r\n   * @return Success\r\n   */\n  updateEmployee(body) {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/UpdateEmployee\";\n    url_ = url_.replace(/[?&]$/, \"\");\n    const content_ = JSON.stringify(body);\n    let options_ = {\n      body: content_,\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\"\n      })\n    };\n    return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap(response_ => {\n      return this.processUpdateEmployee(response_);\n    })).pipe(_observableCatch(response_ => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processUpdateEmployee(response_);\n        } catch (e) {\n          return _observableThrow(e);\n        }\n      } else return _observableThrow(response_);\n    }));\n  }\n  processUpdateEmployee(response) {\n    const status = response.status;\n    const responseBlob = response instanceof HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;\n    let _headers = {};\n    if (response.headers) {\n      for (let key of response.headers.keys()) {\n        _headers[key] = response.headers.get(key);\n      }\n    }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return _observableOf(null);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null);\n  }\n  /**\r\n   * @param id (optional)\r\n   * @return Success\r\n   */\n  getEmployeebyId(id) {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/GetEmployeebyId?\";\n    if (id === null) throw new Error(\"The parameter 'id' cannot be null.\");else if (id !== undefined) url_ += \"id=\" + encodeURIComponent(\"\" + id) + \"&\";\n    url_ = url_.replace(/[?&]$/, \"\");\n    let options_ = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Accept\": \"text/plain\"\n      })\n    };\n    return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap(response_ => {\n      return this.processGetEmployeebyId(response_);\n    })).pipe(_observableCatch(response_ => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processGetEmployeebyId(response_);\n        } catch (e) {\n          return _observableThrow(e);\n        }\n      } else return _observableThrow(response_);\n    }));\n  }\n  processGetEmployeebyId(response) {\n    const status = response.status;\n    const responseBlob = response instanceof HttpResponse ? response.body : response.error instanceof Blob ? response.error : undefined;\n    let _headers = {};\n    if (response.headers) {\n      for (let key of response.headers.keys()) {\n        _headers[key] = response.headers.get(key);\n      }\n    }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        let result200 = null;\n        let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        result200 = EmployeeDto.fromJS(resultData200);\n        return _observableOf(result200);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null);\n  }\n}\nEmployeeAPIClient.ɵfac = function EmployeeAPIClient_Factory(t) {\n  return new (t || EmployeeAPIClient)(i0.ɵɵinject(HttpClient), i0.ɵɵinject(BASE_URL, 8));\n};\nEmployeeAPIClient.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: EmployeeAPIClient,\n  factory: EmployeeAPIClient.ɵfac\n});\nexport class AddEmployeeDto {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n  init(_data) {\n    if (_data) {\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new AddEmployeeDto();\n    result.init(data);\n    return result;\n  }\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\nexport class EmployeeDto {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n  init(_data) {\n    if (_data) {\n      this.pkEmpId = _data[\"pkEmpId\"];\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new EmployeeDto();\n    result.init(data);\n    return result;\n  }\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n    data[\"pkEmpId\"] = this.pkEmpId;\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\nexport class UpdateEmployeeDto {\n  constructor(data) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property)) this[property] = data[property];\n      }\n    }\n  }\n  init(_data) {\n    if (_data) {\n      this.pkEmpId = _data[\"pkEmpId\"];\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n  static fromJS(data) {\n    data = typeof data === 'object' ? data : {};\n    let result = new UpdateEmployeeDto();\n    result.init(data);\n    return result;\n  }\n  toJSON(data) {\n    data = typeof data === 'object' ? data : {};\n    data[\"pkEmpId\"] = this.pkEmpId;\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\nexport class ApiException extends Error {\n  constructor(message, status, response, headers, result) {\n    super();\n    this.isApiException = true;\n    this.message = message;\n    this.status = status;\n    this.response = response;\n    this.headers = headers;\n    this.result = result;\n  }\n  static isApiException(obj) {\n    return obj.isApiException === true;\n  }\n}\nfunction throwException(message, status, response, headers, result) {\n  if (result !== null && result !== undefined) return _observableThrow(result);else return _observableThrow(new ApiException(message, status, response, headers, null));\n}\nfunction blobToText(blob) {\n  return new Observable(observer => {\n    if (!blob) {\n      observer.next(\"\");\n      observer.complete();\n    } else {\n      let reader = new FileReader();\n      reader.onload = event => {\n        observer.next(event.target.result);\n        observer.complete();\n      };\n      reader.readAsText(blob);\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["mergeMap","_observableMergeMap","catchError","_observableCatch","Observable","throwError","_observableThrow","of","_observableOf","InjectionToken","HttpClient","HttpHeaders","HttpResponse","HttpResponseBase","BASE_URL","EmployeeAPIClient","constructor","http","baseUrl","undefined","addEmployee","body","url_","replace","content_","JSON","stringify","options_","observe","responseType","headers","request","pipe","response_","processAddEmployee","e","response","status","responseBlob","error","Blob","_headers","key","keys","get","blobToText","_responseText","throwException","deleteEmployee","id","Error","encodeURIComponent","processDeleteEmployee","getAllEmployees","processGetAllEmployees","result200","resultData200","parse","jsonParseReviver","Array","isArray","item","push","EmployeeDto","fromJS","updateEmployee","processUpdateEmployee","getEmployeebyId","processGetEmployeebyId","factory","AddEmployeeDto","data","property","hasOwnProperty","init","_data","empName","empSalary","emailId","password","fkRelation","result","toJSON","pkEmpId","UpdateEmployeeDto","ApiException","message","isApiException","obj","blob","observer","next","complete","reader","FileReader","onload","event","target","readAsText"],"sourceRoot":"","sources":["D:\\WebAPI\\AngularDemo\\AngularDemo\\ClientApp\\src\\app\\Shared\\api-service.service.ts"],"sourcesContent":["import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';\nimport { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';\nimport { Injectable, Inject, Optional, InjectionToken } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';\n\nexport const BASE_URL = new InjectionToken<string>('BASE_URL');\n\n@Injectable()\nexport class EmployeeAPIClient {\n  private http: HttpClient;\n  private baseUrl: string;\n  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;\n\n  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(BASE_URL) baseUrl?: string) {\n    this.http = http;\n    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : \"\";\n  }\n\n  /**\n   * @param body (optional) \n   * @return Success\n   */\n  addEmployee(body: AddEmployeeDto | undefined): Observable<void> {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/AddEmployee\";\n    url_ = url_.replace(/[?&]$/, \"\");\n\n    const content_ = JSON.stringify(body);\n\n    let options_: any = {\n      body: content_,\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\",\n      })\n    };\n\n    return this.http.request(\"post\", url_, options_).pipe(_observableMergeMap((response_: any) => {\n      return this.processAddEmployee(response_);\n    })).pipe(_observableCatch((response_: any) => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processAddEmployee(response_ as any);\n        } catch (e) {\n          return _observableThrow(e) as any as Observable<void>;\n        }\n      } else\n        return _observableThrow(response_) as any as Observable<void>;\n    }));\n  }\n\n  protected processAddEmployee(response: HttpResponseBase): Observable<void> {\n    const status = response.status;\n    const responseBlob =\n      response instanceof HttpResponse ? response.body :\n        (response as any).error instanceof Blob ? (response as any).error : undefined;\n\n    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return _observableOf(null as any);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null as any);\n  }\n\n  /**\n   * @param id (optional) \n   * @return Success\n   */\n  deleteEmployee(id: number | undefined): Observable<void> {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/DeleteEmployee?\";\n    if (id === null)\n      throw new Error(\"The parameter 'id' cannot be null.\");\n    else if (id !== undefined)\n      url_ += \"id=\" + encodeURIComponent(\"\" + id) + \"&\";\n    url_ = url_.replace(/[?&]$/, \"\");\n\n    let options_: any = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n      })\n    };\n\n    return this.http.request(\"delete\", url_, options_).pipe(_observableMergeMap((response_: any) => {\n      return this.processDeleteEmployee(response_);\n    })).pipe(_observableCatch((response_: any) => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processDeleteEmployee(response_ as any);\n        } catch (e) {\n          return _observableThrow(e) as any as Observable<void>;\n        }\n      } else\n        return _observableThrow(response_) as any as Observable<void>;\n    }));\n  }\n\n  protected processDeleteEmployee(response: HttpResponseBase): Observable<void> {\n    const status = response.status;\n    const responseBlob =\n      response instanceof HttpResponse ? response.body :\n        (response as any).error instanceof Blob ? (response as any).error : undefined;\n\n    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return _observableOf(null as any);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null as any);\n  }\n\n  /**\n   * @return Success\n   */\n  getAllEmployees(): Observable<EmployeeDto[]> {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/GetAllEmployees\";\n    url_ = url_.replace(/[?&]$/, \"\");\n\n    let options_: any = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Accept\": \"text/plain\"\n      })\n    };\n\n    return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_: any) => {\n      return this.processGetAllEmployees(response_);\n    })).pipe(_observableCatch((response_: any) => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processGetAllEmployees(response_ as any);\n        } catch (e) {\n          return _observableThrow(e) as any as Observable<EmployeeDto[]>;\n        }\n      } else\n        return _observableThrow(response_) as any as Observable<EmployeeDto[]>;\n    }));\n  }\n\n  protected processGetAllEmployees(response: HttpResponseBase): Observable<EmployeeDto[]> {\n    const status = response.status;\n    const responseBlob =\n      response instanceof HttpResponse ? response.body :\n        (response as any).error instanceof Blob ? (response as any).error : undefined;\n\n    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        let result200: any = null;\n        let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        if (Array.isArray(resultData200)) {\n          result200 = [] as any;\n          for (let item of resultData200)\n            result200!.push(EmployeeDto.fromJS(item));\n        }\n        else {\n          result200 = <any>null;\n        }\n        return _observableOf(result200);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null as any);\n  }\n\n  /**\n   * @param body (optional) \n   * @return Success\n   */\n  updateEmployee(body: UpdateEmployeeDto | undefined): Observable<void> {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/UpdateEmployee\";\n    url_ = url_.replace(/[?&]$/, \"\");\n\n    const content_ = JSON.stringify(body);\n\n    let options_: any = {\n      body: content_,\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Content-Type\": \"application/json\",\n      })\n    };\n\n    return this.http.request(\"put\", url_, options_).pipe(_observableMergeMap((response_: any) => {\n      return this.processUpdateEmployee(response_);\n    })).pipe(_observableCatch((response_: any) => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processUpdateEmployee(response_ as any);\n        } catch (e) {\n          return _observableThrow(e) as any as Observable<void>;\n        }\n      } else\n        return _observableThrow(response_) as any as Observable<void>;\n    }));\n  }\n\n  protected processUpdateEmployee(response: HttpResponseBase): Observable<void> {\n    const status = response.status;\n    const responseBlob =\n      response instanceof HttpResponse ? response.body :\n        (response as any).error instanceof Blob ? (response as any).error : undefined;\n\n    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return _observableOf(null as any);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null as any);\n  }\n\n  /**\n   * @param id (optional) \n   * @return Success\n   */\n  getEmployeebyId(id: number | undefined): Observable<EmployeeDto> {\n    let url_ = this.baseUrl + \"/api/EmployeeAPI/GetEmployeebyId?\";\n    if (id === null)\n      throw new Error(\"The parameter 'id' cannot be null.\");\n    else if (id !== undefined)\n      url_ += \"id=\" + encodeURIComponent(\"\" + id) + \"&\";\n    url_ = url_.replace(/[?&]$/, \"\");\n\n    let options_: any = {\n      observe: \"response\",\n      responseType: \"blob\",\n      headers: new HttpHeaders({\n        \"Accept\": \"text/plain\"\n      })\n    };\n\n    return this.http.request(\"get\", url_, options_).pipe(_observableMergeMap((response_: any) => {\n      return this.processGetEmployeebyId(response_);\n    })).pipe(_observableCatch((response_: any) => {\n      if (response_ instanceof HttpResponseBase) {\n        try {\n          return this.processGetEmployeebyId(response_ as any);\n        } catch (e) {\n          return _observableThrow(e) as any as Observable<EmployeeDto>;\n        }\n      } else\n        return _observableThrow(response_) as any as Observable<EmployeeDto>;\n    }));\n  }\n\n  protected processGetEmployeebyId(response: HttpResponseBase): Observable<EmployeeDto> {\n    const status = response.status;\n    const responseBlob =\n      response instanceof HttpResponse ? response.body :\n        (response as any).error instanceof Blob ? (response as any).error : undefined;\n\n    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); } }\n    if (status === 200) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        let result200: any = null;\n        let resultData200 = _responseText === \"\" ? null : JSON.parse(_responseText, this.jsonParseReviver);\n        result200 = EmployeeDto.fromJS(resultData200);\n        return _observableOf(result200);\n      }));\n    } else if (status !== 200 && status !== 204) {\n      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {\n        return throwException(\"An unexpected server error occurred.\", status, _responseText, _headers);\n      }));\n    }\n    return _observableOf(null as any);\n  }\n}\n\nexport class AddEmployeeDto implements IAddEmployeeDto {\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n\n  constructor(data?: IAddEmployeeDto) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property))\n          (<any>this)[property] = (<any>data)[property];\n      }\n    }\n  }\n\n  init(_data?: any) {\n    if (_data) {\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n\n  static fromJS(data: any): AddEmployeeDto {\n    data = typeof data === 'object' ? data : {};\n    let result = new AddEmployeeDto();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data?: any) {\n    data = typeof data === 'object' ? data : {};\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\n\nexport interface IAddEmployeeDto {\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n}\n\nexport class EmployeeDto implements IEmployeeDto {\n  pkEmpId?: number;\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n\n  constructor(data?: IEmployeeDto) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property))\n          (<any>this)[property] = (<any>data)[property];\n      }\n    }\n  }\n\n  init(_data?: any) {\n    if (_data) {\n      this.pkEmpId = _data[\"pkEmpId\"];\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n\n  static fromJS(data: any): EmployeeDto {\n    data = typeof data === 'object' ? data : {};\n    let result = new EmployeeDto();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data?: any) {\n    data = typeof data === 'object' ? data : {};\n    data[\"pkEmpId\"] = this.pkEmpId;\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\n\nexport interface IEmployeeDto {\n  pkEmpId?: number;\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n}\n\nexport class UpdateEmployeeDto implements IUpdateEmployeeDto {\n  pkEmpId?: number;\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n\n  constructor(data?: IUpdateEmployeeDto) {\n    if (data) {\n      for (var property in data) {\n        if (data.hasOwnProperty(property))\n          (<any>this)[property] = (<any>data)[property];\n      }\n    }\n  }\n\n  init(_data?: any) {\n    if (_data) {\n      this.pkEmpId = _data[\"pkEmpId\"];\n      this.empName = _data[\"empName\"];\n      this.empSalary = _data[\"empSalary\"];\n      this.emailId = _data[\"emailId\"];\n      this.password = _data[\"password\"];\n      this.fkRelation = _data[\"fkRelation\"];\n    }\n  }\n\n  static fromJS(data: any): UpdateEmployeeDto {\n    data = typeof data === 'object' ? data : {};\n    let result = new UpdateEmployeeDto();\n    result.init(data);\n    return result;\n  }\n\n  toJSON(data?: any) {\n    data = typeof data === 'object' ? data : {};\n    data[\"pkEmpId\"] = this.pkEmpId;\n    data[\"empName\"] = this.empName;\n    data[\"empSalary\"] = this.empSalary;\n    data[\"emailId\"] = this.emailId;\n    data[\"password\"] = this.password;\n    data[\"fkRelation\"] = this.fkRelation;\n    return data;\n  }\n}\n\nexport interface IUpdateEmployeeDto {\n  pkEmpId?: number;\n  empName?: string | undefined;\n  empSalary?: number;\n  emailId?: string | undefined;\n  password?: string | undefined;\n  fkRelation?: number;\n}\n\nexport class ApiException extends Error {\n  override message: string;\n  status: number;\n  response: string;\n  headers: { [key: string]: any; };\n  result: any;\n\n  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {\n    super();\n\n    this.message = message;\n    this.status = status;\n    this.response = response;\n    this.headers = headers;\n    this.result = result;\n  }\n\n  protected isApiException = true;\n\n  static isApiException(obj: any): obj is ApiException {\n    return obj.isApiException === true;\n  }\n}\n\nfunction throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {\n  if (result !== null && result !== undefined)\n    return _observableThrow(result);\n  else\n    return _observableThrow(new ApiException(message, status, response, headers, null));\n}\n\nfunction blobToText(blob: any): Observable<string> {\n  return new Observable<string>((observer: any) => {\n    if (!blob) {\n      observer.next(\"\");\n      observer.complete();\n    } else {\n      let reader = new FileReader();\n      reader.onload = event => {\n        observer.next((event.target as any).result);\n        observer.complete();\n      };\n      reader.readAsText(blob);\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}